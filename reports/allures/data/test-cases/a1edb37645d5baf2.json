{"uid":"a1edb37645d5baf2","name":"登录成功","fullName":"test_case.web_ui.login.test_login.TestLogin#test_001_login_success","historyId":"edc40e2e66be5260b4180f0c0f571310","time":{"start":1659938533548,"stop":1659938572481,"duration":38933},"description":"正确的账号密码，成功登录","descriptionHtml":"<p>正确的账号密码，成功登录</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"dataExchange\"]/div/div[1]/div[1]/div[3]/div/span/span\"}\n  (Session info: chrome=104.0.5112.80)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x003E6463+2188387]\n\tOrdinal0 [0x0037E461+1762401]\n\tOrdinal0 [0x00293D78+802168]\n\tOrdinal0 [0x002C1880+989312]\n\tOrdinal0 [0x002C1B1B+989979]\n\tOrdinal0 [0x002EE912+1173778]\n\tOrdinal0 [0x002DC824+1099812]\n\tOrdinal0 [0x002ECC22+1166370]\n\tOrdinal0 [0x002DC5F6+1099254]\n\tOrdinal0 [0x002B6BE0+945120]\n\tOrdinal0 [0x002B7AD6+948950]\n\tGetHandleVerifier [0x006871F2+2712546]\n\tGetHandleVerifier [0x0067886D+2652765]\n\tGetHandleVerifier [0x0047002A+520730]\n\tGetHandleVerifier [0x0046EE06+516086]\n\tOrdinal0 [0x0038468B+1787531]\n\tOrdinal0 [0x00388E88+1805960]\n\tOrdinal0 [0x00388F75+1806197]\n\tOrdinal0 [0x00391DF1+1842673]\n\tBaseThreadInitThunk [0x762FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x777B7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x777B7A6E+238]","statusTrace":"self = <test_case.web_ui.login.test_login.TestLogin object at 0x0000024D144A9EE0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"001d8f7dd5193de05410d3f4da422340\")>\n\n    @pytest.mark.dependency(name='testUserLogin')\n    @allure.title(\"登录成功\")\n    @allure.description(\"正确的账号密码，成功登录\")\n    def test_001_login_success(self, driver):\n        driver.get(flow_login_url)\n        self.lg = LoginPage(driver)\n        self.lg.login(\"admin\", \"admin1234567\")\n>       assert self.lg.check_text_login_success()\n\ntest_case\\web_ui\\login\\test_login.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\login_page.py:29: in check_text_login_success\n    result = self.find_element(AccountPageLocs.user_icon)\nbase\\basepage.py:74: in find_element\n    raise e\nbase\\basepage.py:69: in find_element\n    print(\"find_element的数据类型：{}\".format(self.driver.find_element(*loc)))\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024D14327040>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777B7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777B7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"dataExchange\"]/div/div[1]/div[1]/div[3]/div/span/span\"}\nE         (Session info: chrome=104.0.5112.80)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x003E6463+2188387]\nE       \tOrdinal0 [0x0037E461+1762401]\nE       \tOrdinal0 [0x00293D78+802168]\nE       \tOrdinal0 [0x002C1880+989312]\nE       \tOrdinal0 [0x002C1B1B+989979]\nE       \tOrdinal0 [0x002EE912+1173778]\nE       \tOrdinal0 [0x002DC824+1099812]\nE       \tOrdinal0 [0x002ECC22+1166370]\nE       \tOrdinal0 [0x002DC5F6+1099254]\nE       \tOrdinal0 [0x002B6BE0+945120]\nE       \tOrdinal0 [0x002B7AD6+948950]\nE       \tGetHandleVerifier [0x006871F2+2712546]\nE       \tGetHandleVerifier [0x0067886D+2652765]\nE       \tGetHandleVerifier [0x0047002A+520730]\nE       \tGetHandleVerifier [0x0046EE06+516086]\nE       \tOrdinal0 [0x0038468B+1787531]\nE       \tOrdinal0 [0x00388E88+1805960]\nE       \tOrdinal0 [0x00388F75+1806197]\nE       \tOrdinal0 [0x00391DF1+1842673]\nE       \tBaseThreadInitThunk [0x762FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x777B7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x777B7A6E+238]\n\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1659938533301,"stop":1659938533419,"duration":118},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1659938533419,"stop":1659938533545,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"正确的账号密码，成功登录","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"dataExchange\"]/div/div[1]/div[1]/div[3]/div/span/span\"}\n  (Session info: chrome=104.0.5112.80)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x003E6463+2188387]\n\tOrdinal0 [0x0037E461+1762401]\n\tOrdinal0 [0x00293D78+802168]\n\tOrdinal0 [0x002C1880+989312]\n\tOrdinal0 [0x002C1B1B+989979]\n\tOrdinal0 [0x002EE912+1173778]\n\tOrdinal0 [0x002DC824+1099812]\n\tOrdinal0 [0x002ECC22+1166370]\n\tOrdinal0 [0x002DC5F6+1099254]\n\tOrdinal0 [0x002B6BE0+945120]\n\tOrdinal0 [0x002B7AD6+948950]\n\tGetHandleVerifier [0x006871F2+2712546]\n\tGetHandleVerifier [0x0067886D+2652765]\n\tGetHandleVerifier [0x0047002A+520730]\n\tGetHandleVerifier [0x0046EE06+516086]\n\tOrdinal0 [0x0038468B+1787531]\n\tOrdinal0 [0x00388E88+1805960]\n\tOrdinal0 [0x00388F75+1806197]\n\tOrdinal0 [0x00391DF1+1842673]\n\tBaseThreadInitThunk [0x762FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x777B7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x777B7A6E+238]","statusTrace":"self = <test_case.web_ui.login.test_login.TestLogin object at 0x0000024D144A9EE0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"001d8f7dd5193de05410d3f4da422340\")>\n\n    @pytest.mark.dependency(name='testUserLogin')\n    @allure.title(\"登录成功\")\n    @allure.description(\"正确的账号密码，成功登录\")\n    def test_001_login_success(self, driver):\n        driver.get(flow_login_url)\n        self.lg = LoginPage(driver)\n        self.lg.login(\"admin\", \"admin1234567\")\n>       assert self.lg.check_text_login_success()\n\ntest_case\\web_ui\\login\\test_login.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\login_page.py:29: in check_text_login_success\n    result = self.find_element(AccountPageLocs.user_icon)\nbase\\basepage.py:74: in find_element\n    raise e\nbase\\basepage.py:69: in find_element\n    print(\"find_element的数据类型：{}\".format(self.driver.find_element(*loc)))\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024D14327040>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777B7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777B7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"dataExchange\"]/div/div[1]/div[1]/div[3]/div/span/span\"}\nE         (Session info: chrome=104.0.5112.80)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x003E6463+2188387]\nE       \tOrdinal0 [0x0037E461+1762401]\nE       \tOrdinal0 [0x00293D78+802168]\nE       \tOrdinal0 [0x002C1880+989312]\nE       \tOrdinal0 [0x002C1B1B+989979]\nE       \tOrdinal0 [0x002EE912+1173778]\nE       \tOrdinal0 [0x002DC824+1099812]\nE       \tOrdinal0 [0x002ECC22+1166370]\nE       \tOrdinal0 [0x002DC5F6+1099254]\nE       \tOrdinal0 [0x002B6BE0+945120]\nE       \tOrdinal0 [0x002B7AD6+948950]\nE       \tGetHandleVerifier [0x006871F2+2712546]\nE       \tGetHandleVerifier [0x0067886D+2652765]\nE       \tGetHandleVerifier [0x0047002A+520730]\nE       \tGetHandleVerifier [0x0046EE06+516086]\nE       \tOrdinal0 [0x0038468B+1787531]\nE       \tOrdinal0 [0x00388E88+1805960]\nE       \tOrdinal0 [0x00388F75+1806197]\nE       \tOrdinal0 [0x00391DF1+1842673]\nE       \tBaseThreadInitThunk [0x762FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x777B7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x777B7A6E+238]\n\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException","steps":[],"attachments":[{"uid":"fcfdf28262717d96","name":"log","source":"fcfdf28262717d96.txt","type":"text/plain","size":3761}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1659938572861,"stop":1659938572861,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"项目名称：JugoFlow接口自动化测试项目"},{"name":"feature","value":"模块名称：用户管理"},{"name":"tag","value":"dependency(name='testUserLogin')"},{"name":"parentSuite","value":"test_case.web_ui.login"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"LAPTOP-1J4IJVG2"},{"name":"thread","value":"2084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.web_ui.login.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["dependency(name='testUserLogin')"]},"source":"a1edb37645d5baf2.json","parameterValues":[]}