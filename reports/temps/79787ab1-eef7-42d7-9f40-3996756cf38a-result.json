{"name": "登录成功", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_case.web_ui.my_account.test_node_management.TestNodeManagement object at 0x00000270E08F2AC0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5250b426b9a1deb2c95ce37713b86e04\")>\n\n    @allure.title(\"登录成功\")\n    @allure.description(\"正确的账号密码，成功登录\")\n    def test_001_node_management_list(self, driver):\n        self.account_page = Account_page(driver)\n        self.account_page.click_node_management_icon()\n        # 检查网络节点管理列表页面是否存在“添加”按钮\n>       assert self.account_page.check_page_message()\n\ntest_case\\web_ui\\my_account\\test_node_management.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\account_page.py:17: in check_page_message\n    result = self.check_element_contains_text(loc.add_btn, check_text=\"添加按钮\", mark=\"网络节点管理列表_检查添加按钮\")\nbase\\basepage.py:405: in check_element_contains_text\n    check_result = self.wait_element_contains_text(loc=loc,\nbase\\basepage.py:418: in wait_element_contains_text\n    result = WebDriverWait(self.driver, timeout, poll_frequency).until(EC.text_to_be_present_in_element(loc, check_text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5250b426b9a1deb2c95ce37713b86e04\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x00000270E0C803A0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\sunny\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:90: TimeoutException"}, "description": "正确的账号密码，成功登录", "attachments": [{"name": "log", "source": "f9ad9b49-ce85-4aba-8c29-4b54aff3a7fc-attachment.txt", "type": "text/plain"}], "start": 1659931793831, "stop": 1659931825205, "uuid": "8d2ccae5-92eb-472d-9467-596c23ca3c5e", "historyId": "3a9240c5fffcd55d31daf663f4830d44", "testCaseId": "1f61c10793fa9415ffe8200474c7bf89", "fullName": "test_case.web_ui.my_account.test_node_management.TestNodeManagement#test_001_node_management_list", "labels": [{"name": "feature", "value": "模块名称：我的账户"}, {"name": "epic", "value": "项目名称：JugoFlow接口自动化测试项目"}, {"name": "parentSuite", "value": "test_case.web_ui.my_account"}, {"name": "suite", "value": "test_node_management"}, {"name": "subSuite", "value": "TestNodeManagement"}, {"name": "host", "value": "LAPTOP-1J4IJVG2"}, {"name": "thread", "value": "17304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.web_ui.my_account.test_node_management"}]}